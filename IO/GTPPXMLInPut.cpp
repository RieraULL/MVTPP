// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "GTPPXMLInPut.hpp"

// CostMatrixType
//

CostMatrixType::
CostMatrixType ()
{
}

CostMatrixType::
CostMatrixType (size_type n, const ::xml_schema::unsigned_int& x)
: ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (n, x)
{
}

CostMatrixType::
CostMatrixType (const CostMatrixType& o,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (o, f, c)
{
}

// availabilityMatrixType
//

availabilityMatrixType::
availabilityMatrixType ()
{
}

availabilityMatrixType::
availabilityMatrixType (size_type n, const ::xml_schema::boolean& x)
: ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (n, x)
{
}

availabilityMatrixType::
availabilityMatrixType (const availabilityMatrixType& o,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (o, f, c)
{
}

// coordListType
//

coordListType::
coordListType ()
{
}

coordListType::
coordListType (size_type n, const ::xml_schema::unsigned_int& x)
: ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (n, x)
{
}

coordListType::
coordListType (const coordListType& o,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (o, f, c)
{
}

// TPPXMLInPut_t
//

const TPPXMLInPut_t::instanceName_type& TPPXMLInPut_t::
instanceName () const
{
  return this->instanceName_.get ();
}

TPPXMLInPut_t::instanceName_type& TPPXMLInPut_t::
instanceName ()
{
  return this->instanceName_.get ();
}

void TPPXMLInPut_t::
instanceName (const instanceName_type& x)
{
  this->instanceName_.set (x);
}

void TPPXMLInPut_t::
instanceName (::std::auto_ptr< instanceName_type > x)
{
  this->instanceName_.set (x);
}

const TPPXMLInPut_t::Comment_type& TPPXMLInPut_t::
Comment () const
{
  return this->Comment_.get ();
}

TPPXMLInPut_t::Comment_type& TPPXMLInPut_t::
Comment ()
{
  return this->Comment_.get ();
}

void TPPXMLInPut_t::
Comment (const Comment_type& x)
{
  this->Comment_.set (x);
}

void TPPXMLInPut_t::
Comment (::std::auto_ptr< Comment_type > x)
{
  this->Comment_.set (x);
}

const TPPXMLInPut_t::nNodes_type& TPPXMLInPut_t::
nNodes () const
{
  return this->nNodes_.get ();
}

TPPXMLInPut_t::nNodes_type& TPPXMLInPut_t::
nNodes ()
{
  return this->nNodes_.get ();
}

void TPPXMLInPut_t::
nNodes (const nNodes_type& x)
{
  this->nNodes_.set (x);
}

const TPPXMLInPut_t::nUsers_type& TPPXMLInPut_t::
nUsers () const
{
  return this->nUsers_.get ();
}

TPPXMLInPut_t::nUsers_type& TPPXMLInPut_t::
nUsers ()
{
  return this->nUsers_.get ();
}

void TPPXMLInPut_t::
nUsers (const nUsers_type& x)
{
  this->nUsers_.set (x);
}

const TPPXMLInPut_t::nodesMatrixCost_type& TPPXMLInPut_t::
nodesMatrixCost () const
{
  return this->nodesMatrixCost_.get ();
}

TPPXMLInPut_t::nodesMatrixCost_type& TPPXMLInPut_t::
nodesMatrixCost ()
{
  return this->nodesMatrixCost_.get ();
}

void TPPXMLInPut_t::
nodesMatrixCost (const nodesMatrixCost_type& x)
{
  this->nodesMatrixCost_.set (x);
}

void TPPXMLInPut_t::
nodesMatrixCost (::std::auto_ptr< nodesMatrixCost_type > x)
{
  this->nodesMatrixCost_.set (x);
}

const TPPXMLInPut_t::usersMatrixCost_type& TPPXMLInPut_t::
usersMatrixCost () const
{
  return this->usersMatrixCost_.get ();
}

TPPXMLInPut_t::usersMatrixCost_type& TPPXMLInPut_t::
usersMatrixCost ()
{
  return this->usersMatrixCost_.get ();
}

void TPPXMLInPut_t::
usersMatrixCost (const usersMatrixCost_type& x)
{
  this->usersMatrixCost_.set (x);
}

void TPPXMLInPut_t::
usersMatrixCost (::std::auto_ptr< usersMatrixCost_type > x)
{
  this->usersMatrixCost_.set (x);
}

const TPPXMLInPut_t::availabilityMatrix_type& TPPXMLInPut_t::
availabilityMatrix () const
{
  return this->availabilityMatrix_.get ();
}

TPPXMLInPut_t::availabilityMatrix_type& TPPXMLInPut_t::
availabilityMatrix ()
{
  return this->availabilityMatrix_.get ();
}

void TPPXMLInPut_t::
availabilityMatrix (const availabilityMatrix_type& x)
{
  this->availabilityMatrix_.set (x);
}

void TPPXMLInPut_t::
availabilityMatrix (::std::auto_ptr< availabilityMatrix_type > x)
{
  this->availabilityMatrix_.set (x);
}

const TPPXMLInPut_t::nodesCoords_type& TPPXMLInPut_t::
nodesCoords () const
{
  return this->nodesCoords_.get ();
}

TPPXMLInPut_t::nodesCoords_type& TPPXMLInPut_t::
nodesCoords ()
{
  return this->nodesCoords_.get ();
}

void TPPXMLInPut_t::
nodesCoords (const nodesCoords_type& x)
{
  this->nodesCoords_.set (x);
}

void TPPXMLInPut_t::
nodesCoords (::std::auto_ptr< nodesCoords_type > x)
{
  this->nodesCoords_.set (x);
}

const TPPXMLInPut_t::usersCoords_type& TPPXMLInPut_t::
usersCoords () const
{
  return this->usersCoords_.get ();
}

TPPXMLInPut_t::usersCoords_type& TPPXMLInPut_t::
usersCoords ()
{
  return this->usersCoords_.get ();
}

void TPPXMLInPut_t::
usersCoords (const usersCoords_type& x)
{
  this->usersCoords_.set (x);
}

void TPPXMLInPut_t::
usersCoords (::std::auto_ptr< usersCoords_type > x)
{
  this->usersCoords_.set (x);
}


// GTPPXMLInPut_t
//

const GTPPXMLInPut_t::TPPInput_type& GTPPXMLInPut_t::
TPPInput () const
{
  return this->TPPInput_.get ();
}

GTPPXMLInPut_t::TPPInput_type& GTPPXMLInPut_t::
TPPInput ()
{
  return this->TPPInput_.get ();
}

void GTPPXMLInPut_t::
TPPInput (const TPPInput_type& x)
{
  this->TPPInput_.set (x);
}

void GTPPXMLInPut_t::
TPPInput (::std::auto_ptr< TPPInput_type > x)
{
  this->TPPInput_.set (x);
}

const GTPPXMLInPut_t::vehicleCapacity_type& GTPPXMLInPut_t::
vehicleCapacity () const
{
  return this->vehicleCapacity_.get ();
}

GTPPXMLInPut_t::vehicleCapacity_type& GTPPXMLInPut_t::
vehicleCapacity ()
{
  return this->vehicleCapacity_.get ();
}

void GTPPXMLInPut_t::
vehicleCapacity (const vehicleCapacity_type& x)
{
  this->vehicleCapacity_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// CostMatrixType
//

CostMatrixType::
CostMatrixType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (e, f, c)
{
}

CostMatrixType::
CostMatrixType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (a, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (a, f, c)
{
}

CostMatrixType::
CostMatrixType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::simple_type (s, e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (s, e, f, c)
{
}

CostMatrixType* CostMatrixType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CostMatrixType (*this, f, c);
}

CostMatrixType::
~CostMatrixType ()
{
}

// availabilityMatrixType
//

availabilityMatrixType::
availabilityMatrixType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::simple_type (e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (e, f, c)
{
}

availabilityMatrixType::
availabilityMatrixType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::simple_type (a, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (a, f, c)
{
}

availabilityMatrixType::
availabilityMatrixType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
: ::xml_schema::simple_type (s, e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (s, e, f, c)
{
}

availabilityMatrixType* availabilityMatrixType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class availabilityMatrixType (*this, f, c);
}

availabilityMatrixType::
~availabilityMatrixType ()
{
}

// coordListType
//

coordListType::
coordListType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::simple_type (e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (e, f, c)
{
}

coordListType::
coordListType (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::simple_type (a, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (a, f, c)
{
}

coordListType::
coordListType (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::simple_type (s, e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (s, e, f, c)
{
}

coordListType* coordListType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class coordListType (*this, f, c);
}

coordListType::
~coordListType ()
{
}

// TPPXMLInPut_t
//

TPPXMLInPut_t::
TPPXMLInPut_t (const instanceName_type& instanceName,
               const Comment_type& Comment,
               const nNodes_type& nNodes,
               const nUsers_type& nUsers,
               const nodesMatrixCost_type& nodesMatrixCost,
               const usersMatrixCost_type& usersMatrixCost,
               const availabilityMatrix_type& availabilityMatrix,
               const nodesCoords_type& nodesCoords,
               const usersCoords_type& usersCoords)
: ::xml_schema::type (),
  instanceName_ (instanceName, ::xml_schema::flags (), this),
  Comment_ (Comment, ::xml_schema::flags (), this),
  nNodes_ (nNodes, ::xml_schema::flags (), this),
  nUsers_ (nUsers, ::xml_schema::flags (), this),
  nodesMatrixCost_ (nodesMatrixCost, ::xml_schema::flags (), this),
  usersMatrixCost_ (usersMatrixCost, ::xml_schema::flags (), this),
  availabilityMatrix_ (availabilityMatrix, ::xml_schema::flags (), this),
  nodesCoords_ (nodesCoords, ::xml_schema::flags (), this),
  usersCoords_ (usersCoords, ::xml_schema::flags (), this)
{
}

TPPXMLInPut_t::
TPPXMLInPut_t (const TPPXMLInPut_t& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  instanceName_ (x.instanceName_, f, this),
  Comment_ (x.Comment_, f, this),
  nNodes_ (x.nNodes_, f, this),
  nUsers_ (x.nUsers_, f, this),
  nodesMatrixCost_ (x.nodesMatrixCost_, f, this),
  usersMatrixCost_ (x.usersMatrixCost_, f, this),
  availabilityMatrix_ (x.availabilityMatrix_, f, this),
  nodesCoords_ (x.nodesCoords_, f, this),
  usersCoords_ (x.usersCoords_, f, this)
{
}

TPPXMLInPut_t::
TPPXMLInPut_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  instanceName_ (f, this),
  Comment_ (f, this),
  nNodes_ (f, this),
  nUsers_ (f, this),
  nodesMatrixCost_ (f, this),
  usersMatrixCost_ (f, this),
  availabilityMatrix_ (f, this),
  nodesCoords_ (f, this),
  usersCoords_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void TPPXMLInPut_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // instanceName
    //
    if (n.name () == "instanceName" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< instanceName_type > r (
        instanceName_traits::create (i, f, this));

      if (!instanceName_.present ())
      {
        this->instanceName_.set (r);
        continue;
      }
    }

    // Comment
    //
    if (n.name () == "Comment" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Comment_type > r (
        Comment_traits::create (i, f, this));

      if (!Comment_.present ())
      {
        this->Comment_.set (r);
        continue;
      }
    }

    // nNodes
    //
    if (n.name () == "nNodes" && n.namespace_ ().empty ())
    {
      if (!nNodes_.present ())
      {
        this->nNodes_.set (nNodes_traits::create (i, f, this));
        continue;
      }
    }

    // nUsers
    //
    if (n.name () == "nUsers" && n.namespace_ ().empty ())
    {
      if (!nUsers_.present ())
      {
        this->nUsers_.set (nUsers_traits::create (i, f, this));
        continue;
      }
    }

    // nodesMatrixCost
    //
    if (n.name () == "nodesMatrixCost" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< nodesMatrixCost_type > r (
        nodesMatrixCost_traits::create (i, f, this));

      if (!nodesMatrixCost_.present ())
      {
        this->nodesMatrixCost_.set (r);
        continue;
      }
    }

    // usersMatrixCost
    //
    if (n.name () == "usersMatrixCost" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< usersMatrixCost_type > r (
        usersMatrixCost_traits::create (i, f, this));

      if (!usersMatrixCost_.present ())
      {
        this->usersMatrixCost_.set (r);
        continue;
      }
    }

    // availabilityMatrix
    //
    if (n.name () == "availabilityMatrix" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< availabilityMatrix_type > r (
        availabilityMatrix_traits::create (i, f, this));

      if (!availabilityMatrix_.present ())
      {
        this->availabilityMatrix_.set (r);
        continue;
      }
    }

    // nodesCoords
    //
    if (n.name () == "nodesCoords" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< nodesCoords_type > r (
        nodesCoords_traits::create (i, f, this));

      if (!nodesCoords_.present ())
      {
        this->nodesCoords_.set (r);
        continue;
      }
    }

    // usersCoords
    //
    if (n.name () == "usersCoords" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< usersCoords_type > r (
        usersCoords_traits::create (i, f, this));

      if (!usersCoords_.present ())
      {
        this->usersCoords_.set (r);
        continue;
      }
    }

    break;
  }

  if (!instanceName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "instanceName",
      "");
  }

  if (!Comment_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Comment",
      "");
  }

  if (!nNodes_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nNodes",
      "");
  }

  if (!nUsers_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nUsers",
      "");
  }

  if (!nodesMatrixCost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nodesMatrixCost",
      "");
  }

  if (!usersMatrixCost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "usersMatrixCost",
      "");
  }

  if (!availabilityMatrix_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "availabilityMatrix",
      "");
  }

  if (!nodesCoords_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nodesCoords",
      "");
  }

  if (!usersCoords_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "usersCoords",
      "");
  }
}

TPPXMLInPut_t* TPPXMLInPut_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class TPPXMLInPut_t (*this, f, c);
}

TPPXMLInPut_t::
~TPPXMLInPut_t ()
{
}

// GTPPXMLInPut_t
//

GTPPXMLInPut_t::
GTPPXMLInPut_t (const TPPInput_type& TPPInput,
                const vehicleCapacity_type& vehicleCapacity)
: ::xml_schema::type (),
  TPPInput_ (TPPInput, ::xml_schema::flags (), this),
  vehicleCapacity_ (vehicleCapacity, ::xml_schema::flags (), this)
{
}

GTPPXMLInPut_t::
GTPPXMLInPut_t (::std::auto_ptr< TPPInput_type >& TPPInput,
                const vehicleCapacity_type& vehicleCapacity)
: ::xml_schema::type (),
  TPPInput_ (TPPInput, ::xml_schema::flags (), this),
  vehicleCapacity_ (vehicleCapacity, ::xml_schema::flags (), this)
{
}

GTPPXMLInPut_t::
GTPPXMLInPut_t (const GTPPXMLInPut_t& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  TPPInput_ (x.TPPInput_, f, this),
  vehicleCapacity_ (x.vehicleCapacity_, f, this)
{
}

GTPPXMLInPut_t::
GTPPXMLInPut_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  TPPInput_ (f, this),
  vehicleCapacity_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GTPPXMLInPut_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // TPPInput
    //
    if (n.name () == "TPPInput" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< TPPInput_type > r (
        TPPInput_traits::create (i, f, this));

      if (!TPPInput_.present ())
      {
        this->TPPInput_.set (r);
        continue;
      }
    }

    // vehicleCapacity
    //
    if (n.name () == "vehicleCapacity" && n.namespace_ ().empty ())
    {
      if (!vehicleCapacity_.present ())
      {
        this->vehicleCapacity_.set (vehicleCapacity_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!TPPInput_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "TPPInput",
      "");
  }

  if (!vehicleCapacity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "vehicleCapacity",
      "");
  }
}

GTPPXMLInPut_t* GTPPXMLInPut_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GTPPXMLInPut_t (*this, f, c);
}

GTPPXMLInPut_t::
~GTPPXMLInPut_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::TPPXMLInPut_t > r (
    ::TPPInPutXML (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::TPPXMLInPut_t > r (
    ::TPPInPutXML (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::TPPXMLInPut_t > r (
    ::TPPInPutXML (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::TPPInPutXML (isrc, f, p);
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::TPPInPutXML (isrc, h, f, p);
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::TPPInPutXML (isrc, h, f, p);
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::TPPInPutXML (isrc, f, p);
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::TPPInPutXML (isrc, h, f, p);
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::TPPInPutXML (isrc, h, f, p);
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::TPPXMLInPut_t > r (
    ::TPPInPutXML (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::TPPXMLInPut_t > r (
    ::TPPInPutXML (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::TPPXMLInPut_t > r (
    ::TPPInPutXML (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::TPPXMLInPut_t > r (
      ::TPPInPutXML (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "TPPInPutXML" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::TPPXMLInPut_t > r (
      ::xsd::cxx::tree::traits< ::TPPXMLInPut_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "TPPInPutXML",
    "");
}

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "TPPInPutXML" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::TPPXMLInPut_t > r (
      ::xsd::cxx::tree::traits< ::TPPXMLInPut_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "TPPInPutXML",
    "");
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

void
operator<< (::xercesc::DOMElement& e, const CostMatrixType& i)
{
  e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const CostMatrixType& i)
{
  a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const CostMatrixType& i)
{
  l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const availabilityMatrixType& i)
{
  e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::boolean, char >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const availabilityMatrixType& i)
{
  a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::boolean, char >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const availabilityMatrixType& i)
{
  l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::boolean, char >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const coordListType& i)
{
  e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const coordListType& i)
{
  a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const coordListType& i)
{
  l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const TPPXMLInPut_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // instanceName
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "instanceName",
        e));

    s << i.instanceName ();
  }

  // Comment
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Comment",
        e));

    s << i.Comment ();
  }

  // nNodes
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nNodes",
        e));

    s << i.nNodes ();
  }

  // nUsers
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nUsers",
        e));

    s << i.nUsers ();
  }

  // nodesMatrixCost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nodesMatrixCost",
        e));

    s << i.nodesMatrixCost ();
  }

  // usersMatrixCost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "usersMatrixCost",
        e));

    s << i.usersMatrixCost ();
  }

  // availabilityMatrix
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "availabilityMatrix",
        e));

    s << i.availabilityMatrix ();
  }

  // nodesCoords
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nodesCoords",
        e));

    s << i.nodesCoords ();
  }

  // usersCoords
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "usersCoords",
        e));

    s << i.usersCoords ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const GTPPXMLInPut_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // TPPInput
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "TPPInput",
        e));

    s << i.TPPInput ();
  }

  // vehicleCapacity
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "vehicleCapacity",
        e));

    s << i.vehicleCapacity ();
  }
}

void
TPPInPutXML (::std::ostream& o,
             const ::TPPXMLInPut_t& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::TPPInPutXML (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
TPPInPutXML (::std::ostream& o,
             const ::TPPXMLInPut_t& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::TPPInPutXML (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
TPPInPutXML (::std::ostream& o,
             const ::TPPXMLInPut_t& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::TPPInPutXML (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
TPPInPutXML (::xercesc::XMLFormatTarget& t,
             const ::TPPXMLInPut_t& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::TPPInPutXML (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
TPPInPutXML (::xercesc::XMLFormatTarget& t,
             const ::TPPXMLInPut_t& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::TPPInPutXML (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
TPPInPutXML (::xercesc::XMLFormatTarget& t,
             const ::TPPXMLInPut_t& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::TPPInPutXML (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
TPPInPutXML (::xercesc::DOMDocument& d,
             const ::TPPXMLInPut_t& s,
             ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "TPPInPutXML" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TPPInPutXML",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
TPPInPutXML (const ::TPPXMLInPut_t& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "TPPInPutXML",
      "",
      m, f));

  ::TPPInPutXML (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


//// Copyright (C) 2005-2008 Code Synthesis Tools CC
////
//// This program was generated by CodeSynthesis XSD, an XML Schema to
//// C++ data binding compiler.
////
//// This program is free software; you can redistribute it and/or modify
//// it under the terms of the GNU General Public License version 2 as
//// published by the Free Software Foundation.
////
//// This program is distributed in the hope that it will be useful,
//// but WITHOUT ANY WARRANTY; without even the implied warranty of
//// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//// GNU General Public License for more details.
////
//// You should have received a copy of the GNU General Public License
//// along with this program; if not, write to the Free Software
//// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
////
//// In addition, as a special exception, Code Synthesis Tools CC gives
//// permission to link this program with the Xerces-C++ library (or with
//// modified versions of Xerces-C++ that use the same license as Xerces-C++),
//// and distribute linked combinations including the two. You must obey
//// the GNU General Public License version 2 in all respects for all of
//// the code used other than Xerces-C++. If you modify this copy of the
//// program, you may extend this exception to your version of the program,
//// but you are not obligated to do so. If you do not wish to do so, delete
//// this exception statement from your version.
////
//// Furthermore, Code Synthesis Tools CC makes a special exception for
//// the Free/Libre and Open Source Software (FLOSS) which is described
//// in the accompanying FLOSSE file.
////
//
//// Begin prologue.
////
////
//// End prologue.
//
//#include <xsd/cxx/pre.hxx>
//
//#include "GTPPXMLInPut.hpp"
//
//// CostMatrixType
////
//
//CostMatrixType::
//CostMatrixType ()
//{
//}
//
//CostMatrixType::
//CostMatrixType (size_type n, const ::xml_schema::unsigned_int& x)
//: ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (n, x)
//{
//}
//
//CostMatrixType::
//CostMatrixType (const CostMatrixType& o,
//                ::xml_schema::flags f,
//                ::xml_schema::container* c)
//: ::xml_schema::simple_type (o, f, c),
//  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (o, f, c)
//{
//}
//
//// availabilityMatrixType
////
//
//availabilityMatrixType::
//availabilityMatrixType ()
//{
//}
//
//availabilityMatrixType::
//availabilityMatrixType (size_type n, const ::xml_schema::boolean& x)
//: ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (n, x)
//{
//}
//
//availabilityMatrixType::
//availabilityMatrixType (const availabilityMatrixType& o,
//                        ::xml_schema::flags f,
//                        ::xml_schema::container* c)
//: ::xml_schema::simple_type (o, f, c),
//  ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (o, f, c)
//{
//}
//
//// TPPXMLInPut_t
////
//
//const TPPXMLInPut_t::instanceName_type& TPPXMLInPut_t::
//instanceName () const
//{
//  return this->instanceName_.get ();
//}
//
//TPPXMLInPut_t::instanceName_type& TPPXMLInPut_t::
//instanceName ()
//{
//  return this->instanceName_.get ();
//}
//
//void TPPXMLInPut_t::
//instanceName (const instanceName_type& x)
//{
//  this->instanceName_.set (x);
//}
//
//void TPPXMLInPut_t::
//instanceName (::std::auto_ptr< instanceName_type > x)
//{
//  this->instanceName_.set (x);
//}
//
//const TPPXMLInPut_t::Comment_type& TPPXMLInPut_t::
//Comment () const
//{
//  return this->Comment_.get ();
//}
//
//TPPXMLInPut_t::Comment_type& TPPXMLInPut_t::
//Comment ()
//{
//  return this->Comment_.get ();
//}
//
//void TPPXMLInPut_t::
//Comment (const Comment_type& x)
//{
//  this->Comment_.set (x);
//}
//
//void TPPXMLInPut_t::
//Comment (::std::auto_ptr< Comment_type > x)
//{
//  this->Comment_.set (x);
//}
//
//const TPPXMLInPut_t::nNodes_type& TPPXMLInPut_t::
//nNodes () const
//{
//  return this->nNodes_.get ();
//}
//
//TPPXMLInPut_t::nNodes_type& TPPXMLInPut_t::
//nNodes ()
//{
//  return this->nNodes_.get ();
//}
//
//void TPPXMLInPut_t::
//nNodes (const nNodes_type& x)
//{
//  this->nNodes_.set (x);
//}
//
//const TPPXMLInPut_t::nUsers_type& TPPXMLInPut_t::
//nUsers () const
//{
//  return this->nUsers_.get ();
//}
//
//TPPXMLInPut_t::nUsers_type& TPPXMLInPut_t::
//nUsers ()
//{
//  return this->nUsers_.get ();
//}
//
//void TPPXMLInPut_t::
//nUsers (const nUsers_type& x)
//{
//  this->nUsers_.set (x);
//}
//
//const TPPXMLInPut_t::nodesMatrixCost_type& TPPXMLInPut_t::
//nodesMatrixCost () const
//{
//  return this->nodesMatrixCost_.get ();
//}
//
//TPPXMLInPut_t::nodesMatrixCost_type& TPPXMLInPut_t::
//nodesMatrixCost ()
//{
//  return this->nodesMatrixCost_.get ();
//}
//
//void TPPXMLInPut_t::
//nodesMatrixCost (const nodesMatrixCost_type& x)
//{
//  this->nodesMatrixCost_.set (x);
//}
//
//void TPPXMLInPut_t::
//nodesMatrixCost (::std::auto_ptr< nodesMatrixCost_type > x)
//{
//  this->nodesMatrixCost_.set (x);
//}
//
//const TPPXMLInPut_t::usersMatrixCost_type& TPPXMLInPut_t::
//usersMatrixCost () const
//{
//  return this->usersMatrixCost_.get ();
//}
//
//TPPXMLInPut_t::usersMatrixCost_type& TPPXMLInPut_t::
//usersMatrixCost ()
//{
//  return this->usersMatrixCost_.get ();
//}
//
//void TPPXMLInPut_t::
//usersMatrixCost (const usersMatrixCost_type& x)
//{
//  this->usersMatrixCost_.set (x);
//}
//
//void TPPXMLInPut_t::
//usersMatrixCost (::std::auto_ptr< usersMatrixCost_type > x)
//{
//  this->usersMatrixCost_.set (x);
//}
//
//const TPPXMLInPut_t::availabilityMatrix_type& TPPXMLInPut_t::
//availabilityMatrix () const
//{
//  return this->availabilityMatrix_.get ();
//}
//
//TPPXMLInPut_t::availabilityMatrix_type& TPPXMLInPut_t::
//availabilityMatrix ()
//{
//  return this->availabilityMatrix_.get ();
//}
//
//void TPPXMLInPut_t::
//availabilityMatrix (const availabilityMatrix_type& x)
//{
//  this->availabilityMatrix_.set (x);
//}
//
//void TPPXMLInPut_t::
//availabilityMatrix (::std::auto_ptr< availabilityMatrix_type > x)
//{
//  this->availabilityMatrix_.set (x);
//}
//
//
//// GTPPXMLInPut_t
////
//
//const GTPPXMLInPut_t::TPPInput_type& GTPPXMLInPut_t::
//TPPInput () const
//{
//  return this->TPPInput_.get ();
//}
//
//GTPPXMLInPut_t::TPPInput_type& GTPPXMLInPut_t::
//TPPInput ()
//{
//  return this->TPPInput_.get ();
//}
//
//void GTPPXMLInPut_t::
//TPPInput (const TPPInput_type& x)
//{
//  this->TPPInput_.set (x);
//}
//
//void GTPPXMLInPut_t::
//TPPInput (::std::auto_ptr< TPPInput_type > x)
//{
//  this->TPPInput_.set (x);
//}
//
//const GTPPXMLInPut_t::vehicleCapacity_type& GTPPXMLInPut_t::
//vehicleCapacity () const
//{
//  return this->vehicleCapacity_.get ();
//}
//
//GTPPXMLInPut_t::vehicleCapacity_type& GTPPXMLInPut_t::
//vehicleCapacity ()
//{
//  return this->vehicleCapacity_.get ();
//}
//
//void GTPPXMLInPut_t::
//vehicleCapacity (const vehicleCapacity_type& x)
//{
//  this->vehicleCapacity_.set (x);
//}
//
//
//#include <xsd/cxx/xml/dom/parsing-source.hxx>
//
//// CostMatrixType
////
//
//CostMatrixType::
//CostMatrixType (const ::xercesc::DOMElement& e,
//                ::xml_schema::flags f,
//                ::xml_schema::container* c)
//: ::xml_schema::simple_type (e, f, c),
//  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (e, f, c)
//{
//}
//
//CostMatrixType::
//CostMatrixType (const ::xercesc::DOMAttr& a,
//                ::xml_schema::flags f,
//                ::xml_schema::container* c)
//: ::xml_schema::simple_type (a, f, c),
//  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (a, f, c)
//{
//}
//
//CostMatrixType::
//CostMatrixType (const ::std::string& s,
//                const ::xercesc::DOMElement* e,
//                ::xml_schema::flags f,
//                ::xml_schema::container* c)
//: ::xml_schema::simple_type (s, e, f, c),
//  ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (s, e, f, c)
//{
//}
//
//CostMatrixType* CostMatrixType::
//_clone (::xml_schema::flags f,
//        ::xml_schema::container* c) const
//{
//  return new class CostMatrixType (*this, f, c);
//}
//
//CostMatrixType::
//~CostMatrixType ()
//{
//}
//
//// availabilityMatrixType
////
//
//availabilityMatrixType::
//availabilityMatrixType (const ::xercesc::DOMElement& e,
//                        ::xml_schema::flags f,
//                        ::xml_schema::container* c)
//: ::xml_schema::simple_type (e, f, c),
//  ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (e, f, c)
//{
//}
//
//availabilityMatrixType::
//availabilityMatrixType (const ::xercesc::DOMAttr& a,
//                        ::xml_schema::flags f,
//                        ::xml_schema::container* c)
//: ::xml_schema::simple_type (a, f, c),
//  ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (a, f, c)
//{
//}
//
//availabilityMatrixType::
//availabilityMatrixType (const ::std::string& s,
//                        const ::xercesc::DOMElement* e,
//                        ::xml_schema::flags f,
//                        ::xml_schema::container* c)
//: ::xml_schema::simple_type (s, e, f, c),
//  ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (s, e, f, c)
//{
//}
//
//availabilityMatrixType* availabilityMatrixType::
//_clone (::xml_schema::flags f,
//        ::xml_schema::container* c) const
//{
//  return new class availabilityMatrixType (*this, f, c);
//}
//
//availabilityMatrixType::
//~availabilityMatrixType ()
//{
//}
//
//// TPPXMLInPut_t
////
//
//TPPXMLInPut_t::
//TPPXMLInPut_t (const instanceName_type& instanceName,
//               const Comment_type& Comment,
//               const nNodes_type& nNodes,
//               const nUsers_type& nUsers,
//               const nodesMatrixCost_type& nodesMatrixCost,
//               const usersMatrixCost_type& usersMatrixCost,
//               const availabilityMatrix_type& availabilityMatrix)
//: ::xml_schema::type (),
//  instanceName_ (instanceName, ::xml_schema::flags (), this),
//  Comment_ (Comment, ::xml_schema::flags (), this),
//  nNodes_ (nNodes, ::xml_schema::flags (), this),
//  nUsers_ (nUsers, ::xml_schema::flags (), this),
//  nodesMatrixCost_ (nodesMatrixCost, ::xml_schema::flags (), this),
//  usersMatrixCost_ (usersMatrixCost, ::xml_schema::flags (), this),
//  availabilityMatrix_ (availabilityMatrix, ::xml_schema::flags (), this)
//{
//}
//
//TPPXMLInPut_t::
//TPPXMLInPut_t (const TPPXMLInPut_t& x,
//               ::xml_schema::flags f,
//               ::xml_schema::container* c)
//: ::xml_schema::type (x, f, c),
//  instanceName_ (x.instanceName_, f, this),
//  Comment_ (x.Comment_, f, this),
//  nNodes_ (x.nNodes_, f, this),
//  nUsers_ (x.nUsers_, f, this),
//  nodesMatrixCost_ (x.nodesMatrixCost_, f, this),
//  usersMatrixCost_ (x.usersMatrixCost_, f, this),
//  availabilityMatrix_ (x.availabilityMatrix_, f, this)
//{
//}
//
//TPPXMLInPut_t::
//TPPXMLInPut_t (const ::xercesc::DOMElement& e,
//               ::xml_schema::flags f,
//               ::xml_schema::container* c)
//: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
//  instanceName_ (f, this),
//  Comment_ (f, this),
//  nNodes_ (f, this),
//  nUsers_ (f, this),
//  nodesMatrixCost_ (f, this),
//  usersMatrixCost_ (f, this),
//  availabilityMatrix_ (f, this)
//{
//  if ((f & ::xml_schema::flags::base) == 0)
//  {
//    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
//    this->parse (p, f);
//  }
//}
//
//void TPPXMLInPut_t::
//parse (::xsd::cxx::xml::dom::parser< char >& p,
//       ::xml_schema::flags f)
//{
//  for (; p.more_elements (); p.next_element ())
//  {
//    const ::xercesc::DOMElement& i (p.cur_element ());
//    const ::xsd::cxx::xml::qualified_name< char > n (
//      ::xsd::cxx::xml::dom::name< char > (i));
//
//    // instanceName
//    //
//    if (n.name () == "instanceName" && n.namespace_ ().empty ())
//    {
//      ::std::auto_ptr< instanceName_type > r (
//        instanceName_traits::create (i, f, this));
//
//      if (!instanceName_.present ())
//      {
//        this->instanceName_.set (r);
//        continue;
//      }
//    }
//
//    // Comment
//    //
//    if (n.name () == "Comment" && n.namespace_ ().empty ())
//    {
//      ::std::auto_ptr< Comment_type > r (
//        Comment_traits::create (i, f, this));
//
//      if (!Comment_.present ())
//      {
//        this->Comment_.set (r);
//        continue;
//      }
//    }
//
//    // nNodes
//    //
//    if (n.name () == "nNodes" && n.namespace_ ().empty ())
//    {
//      if (!nNodes_.present ())
//      {
//        this->nNodes_.set (nNodes_traits::create (i, f, this));
//        continue;
//      }
//    }
//
//    // nUsers
//    //
//    if (n.name () == "nUsers" && n.namespace_ ().empty ())
//    {
//      if (!nUsers_.present ())
//      {
//        this->nUsers_.set (nUsers_traits::create (i, f, this));
//        continue;
//      }
//    }
//
//    // nodesMatrixCost
//    //
//    if (n.name () == "nodesMatrixCost" && n.namespace_ ().empty ())
//    {
//      ::std::auto_ptr< nodesMatrixCost_type > r (
//        nodesMatrixCost_traits::create (i, f, this));
//
//      if (!nodesMatrixCost_.present ())
//      {
//        this->nodesMatrixCost_.set (r);
//        continue;
//      }
//    }
//
//    // usersMatrixCost
//    //
//    if (n.name () == "usersMatrixCost" && n.namespace_ ().empty ())
//    {
//      ::std::auto_ptr< usersMatrixCost_type > r (
//        usersMatrixCost_traits::create (i, f, this));
//
//      if (!usersMatrixCost_.present ())
//      {
//        this->usersMatrixCost_.set (r);
//        continue;
//      }
//    }
//
//    // availabilityMatrix
//    //
//    if (n.name () == "availabilityMatrix" && n.namespace_ ().empty ())
//    {
//      ::std::auto_ptr< availabilityMatrix_type > r (
//        availabilityMatrix_traits::create (i, f, this));
//
//      if (!availabilityMatrix_.present ())
//      {
//        this->availabilityMatrix_.set (r);
//        continue;
//      }
//    }
//
//    break;
//  }
//
//  if (!instanceName_.present ())
//  {
//    throw ::xsd::cxx::tree::expected_element< char > (
//      "instanceName",
//      "");
//  }
//
//  if (!Comment_.present ())
//  {
//    throw ::xsd::cxx::tree::expected_element< char > (
//      "Comment",
//      "");
//  }
//
//  if (!nNodes_.present ())
//  {
//    throw ::xsd::cxx::tree::expected_element< char > (
//      "nNodes",
//      "");
//  }
//
//  if (!nUsers_.present ())
//  {
//    throw ::xsd::cxx::tree::expected_element< char > (
//      "nUsers",
//      "");
//  }
//
//  if (!nodesMatrixCost_.present ())
//  {
//    throw ::xsd::cxx::tree::expected_element< char > (
//      "nodesMatrixCost",
//      "");
//  }
//
//  if (!usersMatrixCost_.present ())
//  {
//    throw ::xsd::cxx::tree::expected_element< char > (
//      "usersMatrixCost",
//      "");
//  }
//
//  if (!availabilityMatrix_.present ())
//  {
//    throw ::xsd::cxx::tree::expected_element< char > (
//      "availabilityMatrix",
//      "");
//  }
//}
//
//TPPXMLInPut_t* TPPXMLInPut_t::
//_clone (::xml_schema::flags f,
//        ::xml_schema::container* c) const
//{
//  return new class TPPXMLInPut_t (*this, f, c);
//}
//
//TPPXMLInPut_t::
//~TPPXMLInPut_t ()
//{
//}
//
//// GTPPXMLInPut_t
////
//
//GTPPXMLInPut_t::
//GTPPXMLInPut_t (const TPPInput_type& TPPInput,
//                const vehicleCapacity_type& vehicleCapacity)
//: ::xml_schema::type (),
//  TPPInput_ (TPPInput, ::xml_schema::flags (), this),
//  vehicleCapacity_ (vehicleCapacity, ::xml_schema::flags (), this)
//{
//}
//
//GTPPXMLInPut_t::
//GTPPXMLInPut_t (::std::auto_ptr< TPPInput_type >& TPPInput,
//                const vehicleCapacity_type& vehicleCapacity)
//: ::xml_schema::type (),
//  TPPInput_ (TPPInput, ::xml_schema::flags (), this),
//  vehicleCapacity_ (vehicleCapacity, ::xml_schema::flags (), this)
//{
//}
//
//GTPPXMLInPut_t::
//GTPPXMLInPut_t (const GTPPXMLInPut_t& x,
//                ::xml_schema::flags f,
//                ::xml_schema::container* c)
//: ::xml_schema::type (x, f, c),
//  TPPInput_ (x.TPPInput_, f, this),
//  vehicleCapacity_ (x.vehicleCapacity_, f, this)
//{
//}
//
//GTPPXMLInPut_t::
//GTPPXMLInPut_t (const ::xercesc::DOMElement& e,
//                ::xml_schema::flags f,
//                ::xml_schema::container* c)
//: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
//  TPPInput_ (f, this),
//  vehicleCapacity_ (f, this)
//{
//  if ((f & ::xml_schema::flags::base) == 0)
//  {
//    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
//    this->parse (p, f);
//  }
//}
//
//void GTPPXMLInPut_t::
//parse (::xsd::cxx::xml::dom::parser< char >& p,
//       ::xml_schema::flags f)
//{
//  for (; p.more_elements (); p.next_element ())
//  {
//    const ::xercesc::DOMElement& i (p.cur_element ());
//    const ::xsd::cxx::xml::qualified_name< char > n (
//      ::xsd::cxx::xml::dom::name< char > (i));
//
//    // TPPInput
//    //
//    if (n.name () == "TPPInput" && n.namespace_ ().empty ())
//    {
//      ::std::auto_ptr< TPPInput_type > r (
//        TPPInput_traits::create (i, f, this));
//
//      if (!TPPInput_.present ())
//      {
//        this->TPPInput_.set (r);
//        continue;
//      }
//    }
//
//    // vehicleCapacity
//    //
//    if (n.name () == "vehicleCapacity" && n.namespace_ ().empty ())
//    {
//      if (!vehicleCapacity_.present ())
//      {
//        this->vehicleCapacity_.set (vehicleCapacity_traits::create (i, f, this));
//        continue;
//      }
//    }
//
//    break;
//  }
//
//  if (!TPPInput_.present ())
//  {
//    throw ::xsd::cxx::tree::expected_element< char > (
//      "TPPInput",
//      "");
//  }
//
//  if (!vehicleCapacity_.present ())
//  {
//    throw ::xsd::cxx::tree::expected_element< char > (
//      "vehicleCapacity",
//      "");
//  }
//}
//
//GTPPXMLInPut_t* GTPPXMLInPut_t::
//_clone (::xml_schema::flags f,
//        ::xml_schema::container* c) const
//{
//  return new class GTPPXMLInPut_t (*this, f, c);
//}
//
//GTPPXMLInPut_t::
//~GTPPXMLInPut_t ()
//{
//}
//
//#include <istream>
//#include <xsd/cxx/xml/sax/std-input-source.hxx>
//#include <xsd/cxx/tree/error-handler.hxx>
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (const ::std::string& u,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xsd::cxx::xml::auto_initializer i (
//    (f & ::xml_schema::flags::dont_initialize) == 0,
//    (f & ::xml_schema::flags::keep_dom) == 0);
//
//  ::xsd::cxx::tree::error_handler< char > h;
//
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));
//
//  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();
//
//  ::std::auto_ptr< ::TPPXMLInPut_t > r (
//    ::TPPInPutXML (
//      d, f | ::xml_schema::flags::own_dom, p));
//
//  return r;
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (const ::std::string& u,
//             ::xml_schema::error_handler& h,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xsd::cxx::xml::auto_initializer i (
//    (f & ::xml_schema::flags::dont_initialize) == 0,
//    (f & ::xml_schema::flags::keep_dom) == 0);
//
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));
//
//  if (!d.get ())
//    throw ::xsd::cxx::tree::parsing< char > ();
//
//  ::std::auto_ptr< ::TPPXMLInPut_t > r (
//    ::TPPInPutXML (
//      d, f | ::xml_schema::flags::own_dom, p));
//
//  return r;
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (const ::std::string& u,
//             ::xercesc::DOMErrorHandler& h,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));
//
//  if (!d.get ())
//    throw ::xsd::cxx::tree::parsing< char > ();
//
//  ::std::auto_ptr< ::TPPXMLInPut_t > r (
//    ::TPPInPutXML (
//      d, f | ::xml_schema::flags::own_dom, p));
//
//  return r;
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xsd::cxx::xml::auto_initializer i (
//    (f & ::xml_schema::flags::dont_initialize) == 0,
//    (f & ::xml_schema::flags::keep_dom) == 0);
//
//  ::xsd::cxx::xml::sax::std_input_source isrc (is);
//  return ::TPPInPutXML (isrc, f, p);
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             ::xml_schema::error_handler& h,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xsd::cxx::xml::auto_initializer i (
//    (f & ::xml_schema::flags::dont_initialize) == 0,
//    (f & ::xml_schema::flags::keep_dom) == 0);
//
//  ::xsd::cxx::xml::sax::std_input_source isrc (is);
//  return ::TPPInPutXML (isrc, h, f, p);
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             ::xercesc::DOMErrorHandler& h,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xsd::cxx::xml::sax::std_input_source isrc (is);
//  return ::TPPInPutXML (isrc, h, f, p);
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             const ::std::string& sid,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xsd::cxx::xml::auto_initializer i (
//    (f & ::xml_schema::flags::dont_initialize) == 0,
//    (f & ::xml_schema::flags::keep_dom) == 0);
//
//  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
//  return ::TPPInPutXML (isrc, f, p);
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             const ::std::string& sid,
//             ::xml_schema::error_handler& h,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xsd::cxx::xml::auto_initializer i (
//    (f & ::xml_schema::flags::dont_initialize) == 0,
//    (f & ::xml_schema::flags::keep_dom) == 0);
//
//  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
//  return ::TPPInPutXML (isrc, h, f, p);
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             const ::std::string& sid,
//             ::xercesc::DOMErrorHandler& h,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
//  return ::TPPInPutXML (isrc, h, f, p);
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::xercesc::InputSource& i,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xsd::cxx::tree::error_handler< char > h;
//
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));
//
//  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();
//
//  ::std::auto_ptr< ::TPPXMLInPut_t > r (
//    ::TPPInPutXML (
//      d, f | ::xml_schema::flags::own_dom, p));
//
//  return r;
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::xercesc::InputSource& i,
//             ::xml_schema::error_handler& h,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));
//
//  if (!d.get ())
//    throw ::xsd::cxx::tree::parsing< char > ();
//
//  ::std::auto_ptr< ::TPPXMLInPut_t > r (
//    ::TPPInPutXML (
//      d, f | ::xml_schema::flags::own_dom, p));
//
//  return r;
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::xercesc::InputSource& i,
//             ::xercesc::DOMErrorHandler& h,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));
//
//  if (!d.get ())
//    throw ::xsd::cxx::tree::parsing< char > ();
//
//  ::std::auto_ptr< ::TPPXMLInPut_t > r (
//    ::TPPInPutXML (
//      d, f | ::xml_schema::flags::own_dom, p));
//
//  return r;
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (const ::xercesc::DOMDocument& d,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties& p)
//{
//  if (f & ::xml_schema::flags::keep_dom)
//  {
//    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
//      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));
//
//    ::std::auto_ptr< ::TPPXMLInPut_t > r (
//      ::TPPInPutXML (
//        c, f | ::xml_schema::flags::own_dom, p));
//
//    return r;
//  }
//
//  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
//  const ::xsd::cxx::xml::qualified_name< char > n (
//    ::xsd::cxx::xml::dom::name< char > (e));
//
//  if (n.name () == "TPPInPutXML" &&
//      n.namespace_ () == "")
//  {
//    ::std::auto_ptr< ::TPPXMLInPut_t > r (
//      ::xsd::cxx::tree::traits< ::TPPXMLInPut_t, char >::create (
//        e, f, 0));
//    return r;
//  }
//
//  throw ::xsd::cxx::tree::unexpected_element < char > (
//    n.name (),
//    n.namespace_ (),
//    "TPPInPutXML",
//    "");
//}
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
//             ::xml_schema::flags f,
//             const ::xml_schema::properties&)
//{
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
//    ((f & ::xml_schema::flags::keep_dom) &&
//     !(f & ::xml_schema::flags::own_dom))
//    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
//    : 0);
//
//  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
//  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
//
//  const ::xsd::cxx::xml::qualified_name< char > n (
//    ::xsd::cxx::xml::dom::name< char > (e));
//
//  if (f & ::xml_schema::flags::keep_dom)
//    doc.setUserData (::xml_schema::dom::tree_node_key,
//                     (c.get () ? &c : &d),
//                     0);
//
//  if (n.name () == "TPPInPutXML" &&
//      n.namespace_ () == "")
//  {
//    ::std::auto_ptr< ::TPPXMLInPut_t > r (
//      ::xsd::cxx::tree::traits< ::TPPXMLInPut_t, char >::create (
//        e, f, 0));
//    return r;
//  }
//
//  throw ::xsd::cxx::tree::unexpected_element < char > (
//    n.name (),
//    n.namespace_ (),
//    "TPPInPutXML",
//    "");
//}
//
//#include <ostream>
//#include <xsd/cxx/xml/dom/serialization-source.hxx>
//#include <xsd/cxx/tree/error-handler.hxx>
//
//void
//operator<< (::xercesc::DOMElement& e, const CostMatrixType& i)
//{
//  e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >& > (i);
//}
//
//void
//operator<< (::xercesc::DOMAttr& a, const CostMatrixType& i)
//{
//  a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >& > (i);
//}
//
//void
//operator<< (::xml_schema::list_stream& l,
//            const CostMatrixType& i)
//{
//  l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >& > (i);
//}
//
//void
//operator<< (::xercesc::DOMElement& e, const availabilityMatrixType& i)
//{
//  e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::boolean, char >& > (i);
//}
//
//void
//operator<< (::xercesc::DOMAttr& a, const availabilityMatrixType& i)
//{
//  a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::boolean, char >& > (i);
//}
//
//void
//operator<< (::xml_schema::list_stream& l,
//            const availabilityMatrixType& i)
//{
//  l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::boolean, char >& > (i);
//}
//
//void
//operator<< (::xercesc::DOMElement& e, const TPPXMLInPut_t& i)
//{
//  e << static_cast< const ::xml_schema::type& > (i);
//
//  // instanceName
//  //
//  {
//    ::xercesc::DOMElement& s (
//      ::xsd::cxx::xml::dom::create_element (
//        "instanceName",
//        e));
//
//    s << i.instanceName ();
//  }
//
//  // Comment
//  //
//  {
//    ::xercesc::DOMElement& s (
//      ::xsd::cxx::xml::dom::create_element (
//        "Comment",
//        e));
//
//    s << i.Comment ();
//  }
//
//  // nNodes
//  //
//  {
//    ::xercesc::DOMElement& s (
//      ::xsd::cxx::xml::dom::create_element (
//        "nNodes",
//        e));
//
//    s << i.nNodes ();
//  }
//
//  // nUsers
//  //
//  {
//    ::xercesc::DOMElement& s (
//      ::xsd::cxx::xml::dom::create_element (
//        "nUsers",
//        e));
//
//    s << i.nUsers ();
//  }
//
//  // nodesMatrixCost
//  //
//  {
//    ::xercesc::DOMElement& s (
//      ::xsd::cxx::xml::dom::create_element (
//        "nodesMatrixCost",
//        e));
//
//    s << i.nodesMatrixCost ();
//  }
//
//  // usersMatrixCost
//  //
//  {
//    ::xercesc::DOMElement& s (
//      ::xsd::cxx::xml::dom::create_element (
//        "usersMatrixCost",
//        e));
//
//    s << i.usersMatrixCost ();
//  }
//
//  // availabilityMatrix
//  //
//  {
//    ::xercesc::DOMElement& s (
//      ::xsd::cxx::xml::dom::create_element (
//        "availabilityMatrix",
//        e));
//
//    s << i.availabilityMatrix ();
//  }
//}
//
//void
//operator<< (::xercesc::DOMElement& e, const GTPPXMLInPut_t& i)
//{
//  e << static_cast< const ::xml_schema::type& > (i);
//
//  // TPPInput
//  //
//  {
//    ::xercesc::DOMElement& s (
//      ::xsd::cxx::xml::dom::create_element (
//        "TPPInput",
//        e));
//
//    s << i.TPPInput ();
//  }
//
//  // vehicleCapacity
//  //
//  {
//    ::xercesc::DOMElement& s (
//      ::xsd::cxx::xml::dom::create_element (
//        "vehicleCapacity",
//        e));
//
//    s << i.vehicleCapacity ();
//  }
//}
//
//void
//TPPInPutXML (::std::ostream& o,
//             const ::TPPXMLInPut_t& s,
//             const ::xml_schema::namespace_infomap& m,
//             const ::std::string& e,
//             ::xml_schema::flags f)
//{
//  ::xsd::cxx::xml::auto_initializer i (
//    (f & ::xml_schema::flags::dont_initialize) == 0);
//
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::TPPInPutXML (s, m, f));
//
//  ::xsd::cxx::tree::error_handler< char > h;
//
//  ::xsd::cxx::xml::dom::ostream_format_target t (o);
//  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
//  {
//    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
//  }
//}
//
//void
//TPPInPutXML (::std::ostream& o,
//             const ::TPPXMLInPut_t& s,
//             ::xml_schema::error_handler& h,
//             const ::xml_schema::namespace_infomap& m,
//             const ::std::string& e,
//             ::xml_schema::flags f)
//{
//  ::xsd::cxx::xml::auto_initializer i (
//    (f & ::xml_schema::flags::dont_initialize) == 0);
//
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::TPPInPutXML (s, m, f));
//  ::xsd::cxx::xml::dom::ostream_format_target t (o);
//  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
//  {
//    throw ::xsd::cxx::tree::serialization< char > ();
//  }
//}
//
//void
//TPPInPutXML (::std::ostream& o,
//             const ::TPPXMLInPut_t& s,
//             ::xercesc::DOMErrorHandler& h,
//             const ::xml_schema::namespace_infomap& m,
//             const ::std::string& e,
//             ::xml_schema::flags f)
//{
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::TPPInPutXML (s, m, f));
//  ::xsd::cxx::xml::dom::ostream_format_target t (o);
//  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
//  {
//    throw ::xsd::cxx::tree::serialization< char > ();
//  }
//}
//
//void
//TPPInPutXML (::xercesc::XMLFormatTarget& t,
//             const ::TPPXMLInPut_t& s,
//             const ::xml_schema::namespace_infomap& m,
//             const ::std::string& e,
//             ::xml_schema::flags f)
//{
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::TPPInPutXML (s, m, f));
//
//  ::xsd::cxx::tree::error_handler< char > h;
//
//  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
//  {
//    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
//  }
//}
//
//void
//TPPInPutXML (::xercesc::XMLFormatTarget& t,
//             const ::TPPXMLInPut_t& s,
//             ::xml_schema::error_handler& h,
//             const ::xml_schema::namespace_infomap& m,
//             const ::std::string& e,
//             ::xml_schema::flags f)
//{
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::TPPInPutXML (s, m, f));
//  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
//  {
//    throw ::xsd::cxx::tree::serialization< char > ();
//  }
//}
//
//void
//TPPInPutXML (::xercesc::XMLFormatTarget& t,
//             const ::TPPXMLInPut_t& s,
//             ::xercesc::DOMErrorHandler& h,
//             const ::xml_schema::namespace_infomap& m,
//             const ::std::string& e,
//             ::xml_schema::flags f)
//{
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::TPPInPutXML (s, m, f));
//  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
//  {
//    throw ::xsd::cxx::tree::serialization< char > ();
//  }
//}
//
//void
//TPPInPutXML (::xercesc::DOMDocument& d,
//             const ::TPPXMLInPut_t& s,
//             ::xml_schema::flags)
//{
//  ::xercesc::DOMElement& e (*d.getDocumentElement ());
//  const ::xsd::cxx::xml::qualified_name< char > n (
//    ::xsd::cxx::xml::dom::name< char > (e));
//
//  if (n.name () == "TPPInPutXML" &&
//      n.namespace_ () == "")
//  {
//    e << s;
//  }
//  else
//  {
//    throw ::xsd::cxx::tree::unexpected_element < char > (
//      n.name (),
//      n.namespace_ (),
//      "TPPInPutXML",
//      "");
//  }
//}
//
//::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
//TPPInPutXML (const ::TPPXMLInPut_t& s,
//             const ::xml_schema::namespace_infomap& m,
//             ::xml_schema::flags f)
//{
//  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
//    ::xsd::cxx::xml::dom::serialize< char > (
//      "TPPInPutXML",
//      "",
//      m, f));
//
//  ::TPPInPutXML (*d, s, f);
//  return d;
//}
//
//#include <xsd/cxx/post.hxx>
//
//// Begin epilogue.
////
////
//// End epilogue.
//
