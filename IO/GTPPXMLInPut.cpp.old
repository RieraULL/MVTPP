// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "GTPPXMLInPut.hpp"

// VehicleDescription_t
// 

const VehicleDescription_t::Capacity_optional& VehicleDescription_t::
Capacity () const
{
  return this->Capacity_;
}

VehicleDescription_t::Capacity_optional& VehicleDescription_t::
Capacity ()
{
  return this->Capacity_;
}

void VehicleDescription_t::
Capacity (const Capacity_type& x)
{
  this->Capacity_.set (x);
}

void VehicleDescription_t::
Capacity (const Capacity_optional& x)
{
  this->Capacity_ = x;
}

const VehicleDescription_t::Cost_optional& VehicleDescription_t::
Cost () const
{
  return this->Cost_;
}

VehicleDescription_t::Cost_optional& VehicleDescription_t::
Cost ()
{
  return this->Cost_;
}

void VehicleDescription_t::
Cost (const Cost_type& x)
{
  this->Cost_.set (x);
}

void VehicleDescription_t::
Cost (const Cost_optional& x)
{
  this->Cost_ = x;
}

const VehicleDescription_t::FixedCost_optional& VehicleDescription_t::
FixedCost () const
{
  return this->FixedCost_;
}

VehicleDescription_t::FixedCost_optional& VehicleDescription_t::
FixedCost ()
{
  return this->FixedCost_;
}

void VehicleDescription_t::
FixedCost (const FixedCost_type& x)
{
  this->FixedCost_.set (x);
}

void VehicleDescription_t::
FixedCost (const FixedCost_optional& x)
{
  this->FixedCost_ = x;
}

const VehicleDescription_t::nItems_optional& VehicleDescription_t::
nItems () const
{
  return this->nItems_;
}

VehicleDescription_t::nItems_optional& VehicleDescription_t::
nItems ()
{
  return this->nItems_;
}

void VehicleDescription_t::
nItems (const nItems_type& x)
{
  this->nItems_.set (x);
}

void VehicleDescription_t::
nItems (const nItems_optional& x)
{
  this->nItems_ = x;
}


// GTPPXMLInPut_t
// 

const GTPPXMLInPut_t::instanceName_type& GTPPXMLInPut_t::
instanceName () const
{
  return this->instanceName_.get ();
}

GTPPXMLInPut_t::instanceName_type& GTPPXMLInPut_t::
instanceName ()
{
  return this->instanceName_.get ();
}

void GTPPXMLInPut_t::
instanceName (const instanceName_type& x)
{
  this->instanceName_.set (x);
}

void GTPPXMLInPut_t::
instanceName (::std::auto_ptr< instanceName_type > x)
{
  this->instanceName_.set (x);
}

const GTPPXMLInPut_t::Comment_type& GTPPXMLInPut_t::
Comment () const
{
  return this->Comment_.get ();
}

GTPPXMLInPut_t::Comment_type& GTPPXMLInPut_t::
Comment ()
{
  return this->Comment_.get ();
}

void GTPPXMLInPut_t::
Comment (const Comment_type& x)
{
  this->Comment_.set (x);
}

void GTPPXMLInPut_t::
Comment (::std::auto_ptr< Comment_type > x)
{
  this->Comment_.set (x);
}

const GTPPXMLInPut_t::nNodes_type& GTPPXMLInPut_t::
nNodes () const
{
  return this->nNodes_.get ();
}

GTPPXMLInPut_t::nNodes_type& GTPPXMLInPut_t::
nNodes ()
{
  return this->nNodes_.get ();
}

void GTPPXMLInPut_t::
nNodes (const nNodes_type& x)
{
  this->nNodes_.set (x);
}

const GTPPXMLInPut_t::nUsers_type& GTPPXMLInPut_t::
nUsers () const
{
  return this->nUsers_.get ();
}

GTPPXMLInPut_t::nUsers_type& GTPPXMLInPut_t::
nUsers ()
{
  return this->nUsers_.get ();
}

void GTPPXMLInPut_t::
nUsers (const nUsers_type& x)
{
  this->nUsers_.set (x);
}

const GTPPXMLInPut_t::nodesMatrixCost_sequence& GTPPXMLInPut_t::
nodesMatrixCost () const
{
  return this->nodesMatrixCost_;
}

GTPPXMLInPut_t::nodesMatrixCost_sequence& GTPPXMLInPut_t::
nodesMatrixCost ()
{
  return this->nodesMatrixCost_;
}

void GTPPXMLInPut_t::
nodesMatrixCost (const nodesMatrixCost_sequence& s)
{
  this->nodesMatrixCost_ = s;
}

const GTPPXMLInPut_t::usersMatrixCost_sequence& GTPPXMLInPut_t::
usersMatrixCost () const
{
  return this->usersMatrixCost_;
}

GTPPXMLInPut_t::usersMatrixCost_sequence& GTPPXMLInPut_t::
usersMatrixCost ()
{
  return this->usersMatrixCost_;
}

void GTPPXMLInPut_t::
usersMatrixCost (const usersMatrixCost_sequence& s)
{
  this->usersMatrixCost_ = s;
}

const GTPPXMLInPut_t::nVehicles_type& GTPPXMLInPut_t::
nVehicles () const
{
  return this->nVehicles_.get ();
}

GTPPXMLInPut_t::nVehicles_type& GTPPXMLInPut_t::
nVehicles ()
{
  return this->nVehicles_.get ();
}

void GTPPXMLInPut_t::
nVehicles (const nVehicles_type& x)
{
  this->nVehicles_.set (x);
}

const GTPPXMLInPut_t::vehiclesDescription_sequence& GTPPXMLInPut_t::
vehiclesDescription () const
{
  return this->vehiclesDescription_;
}

GTPPXMLInPut_t::vehiclesDescription_sequence& GTPPXMLInPut_t::
vehiclesDescription ()
{
  return this->vehiclesDescription_;
}

void GTPPXMLInPut_t::
vehiclesDescription (const vehiclesDescription_sequence& s)
{
  this->vehiclesDescription_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// VehicleDescription_t
//

VehicleDescription_t::
VehicleDescription_t ()
: ::xml_schema::type (),
  Capacity_ (::xml_schema::flags (), this),
  Cost_ (::xml_schema::flags (), this),
  FixedCost_ (::xml_schema::flags (), this),
  nItems_ (::xml_schema::flags (), this)
{
}

VehicleDescription_t::
VehicleDescription_t (const VehicleDescription_t& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Capacity_ (x.Capacity_, f, this),
  Cost_ (x.Cost_, f, this),
  FixedCost_ (x.FixedCost_, f, this),
  nItems_ (x.nItems_, f, this)
{
}

VehicleDescription_t::
VehicleDescription_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Capacity_ (f, this),
  Cost_ (f, this),
  FixedCost_ (f, this),
  nItems_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void VehicleDescription_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "Capacity" && n.namespace_ ().empty ())
    {
      this->Capacity_.set (Capacity_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "Cost" && n.namespace_ ().empty ())
    {
      this->Cost_.set (Cost_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "FixedCost" && n.namespace_ ().empty ())
    {
      this->FixedCost_.set (FixedCost_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "nItems" && n.namespace_ ().empty ())
    {
      this->nItems_.set (nItems_traits::create (i, f, this));
      continue;
    }
  }
}

VehicleDescription_t* VehicleDescription_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class VehicleDescription_t (*this, f, c);
}

VehicleDescription_t::
~VehicleDescription_t ()
{
}

// GTPPXMLInPut_t
//

GTPPXMLInPut_t::
GTPPXMLInPut_t (const instanceName_type& instanceName,
                const Comment_type& Comment,
                const nNodes_type& nNodes,
                const nUsers_type& nUsers,
                const nVehicles_type& nVehicles)
: ::xml_schema::type (),
  instanceName_ (instanceName, ::xml_schema::flags (), this),
  Comment_ (Comment, ::xml_schema::flags (), this),
  nNodes_ (nNodes, ::xml_schema::flags (), this),
  nUsers_ (nUsers, ::xml_schema::flags (), this),
  nodesMatrixCost_ (::xml_schema::flags (), this),
  usersMatrixCost_ (::xml_schema::flags (), this),
  nVehicles_ (nVehicles, ::xml_schema::flags (), this),
  vehiclesDescription_ (::xml_schema::flags (), this)
{
}

GTPPXMLInPut_t::
GTPPXMLInPut_t (const GTPPXMLInPut_t& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  instanceName_ (x.instanceName_, f, this),
  Comment_ (x.Comment_, f, this),
  nNodes_ (x.nNodes_, f, this),
  nUsers_ (x.nUsers_, f, this),
  nodesMatrixCost_ (x.nodesMatrixCost_, f, this),
  usersMatrixCost_ (x.usersMatrixCost_, f, this),
  nVehicles_ (x.nVehicles_, f, this),
  vehiclesDescription_ (x.vehiclesDescription_, f, this)
{
}

GTPPXMLInPut_t::
GTPPXMLInPut_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  instanceName_ (f, this),
  Comment_ (f, this),
  nNodes_ (f, this),
  nUsers_ (f, this),
  nodesMatrixCost_ (f, this),
  usersMatrixCost_ (f, this),
  nVehicles_ (f, this),
  vehiclesDescription_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void GTPPXMLInPut_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // instanceName
    //
    if (n.name () == "instanceName" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< instanceName_type > r (
        instanceName_traits::create (i, f, this));

      if (!instanceName_.present ())
      {
        this->instanceName_.set (r);
        continue;
      }
    }

    // Comment
    //
    if (n.name () == "Comment" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Comment_type > r (
        Comment_traits::create (i, f, this));

      if (!Comment_.present ())
      {
        this->Comment_.set (r);
        continue;
      }
    }

    // nNodes
    //
    if (n.name () == "nNodes" && n.namespace_ ().empty ())
    {
      if (!nNodes_.present ())
      {
        this->nNodes_.set (nNodes_traits::create (i, f, this));
        continue;
      }
    }

    // nUsers
    //
    if (n.name () == "nUsers" && n.namespace_ ().empty ())
    {
      if (!nUsers_.present ())
      {
        this->nUsers_.set (nUsers_traits::create (i, f, this));
        continue;
      }
    }

    // nodesMatrixCost
    //
    if (n.name () == "nodesMatrixCost" && n.namespace_ ().empty ())
    {
      this->nodesMatrixCost_.push_back (nodesMatrixCost_traits::create (i, f, this));
      continue;
    }

    // usersMatrixCost
    //
    if (n.name () == "usersMatrixCost" && n.namespace_ ().empty ())
    {
      this->usersMatrixCost_.push_back (usersMatrixCost_traits::create (i, f, this));
      continue;
    }

    // nVehicles
    //
    if (n.name () == "nVehicles" && n.namespace_ ().empty ())
    {
      if (!nVehicles_.present ())
      {
        this->nVehicles_.set (nVehicles_traits::create (i, f, this));
        continue;
      }
    }

    // vehiclesDescription
    //
    if (n.name () == "vehiclesDescription" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< vehiclesDescription_type > r (
        vehiclesDescription_traits::create (i, f, this));

      this->vehiclesDescription_.push_back (r);
      continue;
    }

    break;
  }

  if (!instanceName_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "instanceName",
      "");
  }

  if (!Comment_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Comment",
      "");
  }

  if (!nNodes_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nNodes",
      "");
  }

  if (!nUsers_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nUsers",
      "");
  }

  if (!nVehicles_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nVehicles",
      "");
  }
}

GTPPXMLInPut_t* GTPPXMLInPut_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class GTPPXMLInPut_t (*this, f, c);
}

GTPPXMLInPut_t::
~GTPPXMLInPut_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::GTPPXMLInPut_t > r (
    ::GTPPXMLInPut (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::GTPPXMLInPut_t > r (
    ::GTPPXMLInPut (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::GTPPXMLInPut_t > r (
    ::GTPPXMLInPut (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::GTPPXMLInPut (isrc, f, p);
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::GTPPXMLInPut (isrc, h, f, p);
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::GTPPXMLInPut (isrc, h, f, p);
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::GTPPXMLInPut (isrc, f, p);
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::GTPPXMLInPut (isrc, h, f, p);
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::GTPPXMLInPut (isrc, h, f, p);
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::GTPPXMLInPut_t > r (
    ::GTPPXMLInPut (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::GTPPXMLInPut_t > r (
    ::GTPPXMLInPut (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::GTPPXMLInPut_t > r (
    ::GTPPXMLInPut (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::GTPPXMLInPut_t > r (
      ::GTPPXMLInPut (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "GTPPXMLInPut" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::GTPPXMLInPut_t > r (
      ::xsd::cxx::tree::traits< ::GTPPXMLInPut_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "GTPPXMLInPut",
    "");
}

::std::auto_ptr< ::GTPPXMLInPut_t >
GTPPXMLInPut (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "GTPPXMLInPut" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::GTPPXMLInPut_t > r (
      ::xsd::cxx::tree::traits< ::GTPPXMLInPut_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "GTPPXMLInPut",
    "");
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

void
operator<< (::xercesc::DOMElement& e, const VehicleDescription_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // Capacity
  //
  if (i.Capacity ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Capacity",
        e));

    a << *i.Capacity ();
  }

  // Cost
  //
  if (i.Cost ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "Cost",
        e));

    a << ::xml_schema::as_double(*i.Cost ());
  }

  // FixedCost
  //
  if (i.FixedCost ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "FixedCost",
        e));

    a << ::xml_schema::as_double(*i.FixedCost ());
  }

  // nItems
  //
  if (i.nItems ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "nItems",
        e));

    a << *i.nItems ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const GTPPXMLInPut_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // instanceName
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "instanceName",
        e));

    s << i.instanceName ();
  }

  // Comment
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Comment",
        e));

    s << i.Comment ();
  }

  // nNodes
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nNodes",
        e));

    s << i.nNodes ();
  }

  // nUsers
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nUsers",
        e));

    s << i.nUsers ();
  }

  // nodesMatrixCost
  //
  for (GTPPXMLInPut_t::nodesMatrixCost_const_iterator
       b (i.nodesMatrixCost ().begin ()), n (i.nodesMatrixCost ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nodesMatrixCost",
        e));

    s << ::xml_schema::as_double (*b);
  }

  // usersMatrixCost
  //
  for (GTPPXMLInPut_t::usersMatrixCost_const_iterator
       b (i.usersMatrixCost ().begin ()), n (i.usersMatrixCost ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "usersMatrixCost",
        e));

    s << ::xml_schema::as_double (*b);
  }

  // nVehicles
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nVehicles",
        e));

    s << i.nVehicles ();
  }

  // vehiclesDescription
  //
  for (GTPPXMLInPut_t::vehiclesDescription_const_iterator
       b (i.vehiclesDescription ().begin ()), n (i.vehiclesDescription ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "vehiclesDescription",
        e));

    s << *b;
  }
}

void
GTPPXMLInPut (::std::ostream& o,
              const ::GTPPXMLInPut_t& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GTPPXMLInPut (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
GTPPXMLInPut (::std::ostream& o,
              const ::GTPPXMLInPut_t& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GTPPXMLInPut (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
GTPPXMLInPut (::std::ostream& o,
              const ::GTPPXMLInPut_t& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GTPPXMLInPut (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
GTPPXMLInPut (::xercesc::XMLFormatTarget& t,
              const ::GTPPXMLInPut_t& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GTPPXMLInPut (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
GTPPXMLInPut (::xercesc::XMLFormatTarget& t,
              const ::GTPPXMLInPut_t& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GTPPXMLInPut (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
GTPPXMLInPut (::xercesc::XMLFormatTarget& t,
              const ::GTPPXMLInPut_t& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::GTPPXMLInPut (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
GTPPXMLInPut (::xercesc::DOMDocument& d,
              const ::GTPPXMLInPut_t& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "GTPPXMLInPut" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GTPPXMLInPut",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
GTPPXMLInPut (const ::GTPPXMLInPut_t& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "GTPPXMLInPut",
      "",
      m, f));

  ::GTPPXMLInPut (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

