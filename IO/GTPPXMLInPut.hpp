// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MVTPPXMLSCHEMA_HXX
#define MVTPPXMLSCHEMA_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;
  typedef ::xsd::cxx::tree::as_double < double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal < decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class CostMatrixType;
class availabilityMatrixType;
class coordListType;
class TPPXMLInPut_t;
class GTPPXMLInPut_t;

#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class CostMatrixType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >
{
  public:
  CostMatrixType ();

  CostMatrixType (size_type n, const ::xml_schema::unsigned_int& x);

  template < typename I >
  CostMatrixType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (begin, end)
  {
  }

  CostMatrixType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  CostMatrixType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  CostMatrixType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  CostMatrixType (const CostMatrixType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual CostMatrixType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual
  ~CostMatrixType ();
};

class availabilityMatrixType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::boolean, char >
{
  public:
  availabilityMatrixType ();

  availabilityMatrixType (size_type n, const ::xml_schema::boolean& x);

  template < typename I >
  availabilityMatrixType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (begin, end)
  {
  }

  availabilityMatrixType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  availabilityMatrixType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  availabilityMatrixType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  availabilityMatrixType (const availabilityMatrixType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual availabilityMatrixType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual
  ~availabilityMatrixType ();
};

class coordListType: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >
{
  public:
  coordListType ();

  coordListType (size_type n, const ::xml_schema::unsigned_int& x);

  template < typename I >
  coordListType (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (begin, end)
  {
  }

  coordListType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  coordListType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  coordListType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  coordListType (const coordListType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual coordListType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual
  ~coordListType ();
};

class TPPXMLInPut_t: public ::xml_schema::type
{
  public:
  // instanceName
  //
  typedef ::xml_schema::string instanceName_type;
  typedef ::xsd::cxx::tree::traits< instanceName_type, char > instanceName_traits;

  const instanceName_type&
  instanceName () const;

  instanceName_type&
  instanceName ();

  void
  instanceName (const instanceName_type& x);

  void
  instanceName (::std::auto_ptr< instanceName_type > p);

  // Comment
  //
  typedef ::xml_schema::string Comment_type;
  typedef ::xsd::cxx::tree::traits< Comment_type, char > Comment_traits;

  const Comment_type&
  Comment () const;

  Comment_type&
  Comment ();

  void
  Comment (const Comment_type& x);

  void
  Comment (::std::auto_ptr< Comment_type > p);

  // nNodes
  //
  typedef ::xml_schema::unsigned_int nNodes_type;
  typedef ::xsd::cxx::tree::traits< nNodes_type, char > nNodes_traits;

  const nNodes_type&
  nNodes () const;

  nNodes_type&
  nNodes ();

  void
  nNodes (const nNodes_type& x);

  // nUsers
  //
  typedef ::xml_schema::unsigned_int nUsers_type;
  typedef ::xsd::cxx::tree::traits< nUsers_type, char > nUsers_traits;

  const nUsers_type&
  nUsers () const;

  nUsers_type&
  nUsers ();

  void
  nUsers (const nUsers_type& x);

  // nodesMatrixCost
  //
  typedef ::CostMatrixType nodesMatrixCost_type;
  typedef ::xsd::cxx::tree::traits< nodesMatrixCost_type, char > nodesMatrixCost_traits;

  const nodesMatrixCost_type&
  nodesMatrixCost () const;

  nodesMatrixCost_type&
  nodesMatrixCost ();

  void
  nodesMatrixCost (const nodesMatrixCost_type& x);

  void
  nodesMatrixCost (::std::auto_ptr< nodesMatrixCost_type > p);

  // usersMatrixCost
  //
  typedef ::CostMatrixType usersMatrixCost_type;
  typedef ::xsd::cxx::tree::traits< usersMatrixCost_type, char > usersMatrixCost_traits;

  const usersMatrixCost_type&
  usersMatrixCost () const;

  usersMatrixCost_type&
  usersMatrixCost ();

  void
  usersMatrixCost (const usersMatrixCost_type& x);

  void
  usersMatrixCost (::std::auto_ptr< usersMatrixCost_type > p);

  // availabilityMatrix
  //
  typedef ::availabilityMatrixType availabilityMatrix_type;
  typedef ::xsd::cxx::tree::traits< availabilityMatrix_type, char > availabilityMatrix_traits;

  const availabilityMatrix_type&
  availabilityMatrix () const;

  availabilityMatrix_type&
  availabilityMatrix ();

  void
  availabilityMatrix (const availabilityMatrix_type& x);

  void
  availabilityMatrix (::std::auto_ptr< availabilityMatrix_type > p);

  // nodesCoords
  //
  typedef ::coordListType nodesCoords_type;
  typedef ::xsd::cxx::tree::traits< nodesCoords_type, char > nodesCoords_traits;

  const nodesCoords_type&
  nodesCoords () const;

  nodesCoords_type&
  nodesCoords ();

  void
  nodesCoords (const nodesCoords_type& x);

  void
  nodesCoords (::std::auto_ptr< nodesCoords_type > p);

  // usersCoords
  //
  typedef ::coordListType usersCoords_type;
  typedef ::xsd::cxx::tree::traits< usersCoords_type, char > usersCoords_traits;

  const usersCoords_type&
  usersCoords () const;

  usersCoords_type&
  usersCoords ();

  void
  usersCoords (const usersCoords_type& x);

  void
  usersCoords (::std::auto_ptr< usersCoords_type > p);

  // Constructors.
  //
  TPPXMLInPut_t (const instanceName_type&,
                 const Comment_type&,
                 const nNodes_type&,
                 const nUsers_type&,
                 const nodesMatrixCost_type&,
                 const usersMatrixCost_type&,
                 const availabilityMatrix_type&,
                 const nodesCoords_type&,
                 const usersCoords_type&);

  TPPXMLInPut_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  TPPXMLInPut_t (const TPPXMLInPut_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual TPPXMLInPut_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual
  ~TPPXMLInPut_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< instanceName_type > instanceName_;
  ::xsd::cxx::tree::one< Comment_type > Comment_;
  ::xsd::cxx::tree::one< nNodes_type > nNodes_;
  ::xsd::cxx::tree::one< nUsers_type > nUsers_;
  ::xsd::cxx::tree::one< nodesMatrixCost_type > nodesMatrixCost_;
  ::xsd::cxx::tree::one< usersMatrixCost_type > usersMatrixCost_;
  ::xsd::cxx::tree::one< availabilityMatrix_type > availabilityMatrix_;
  ::xsd::cxx::tree::one< nodesCoords_type > nodesCoords_;
  ::xsd::cxx::tree::one< usersCoords_type > usersCoords_;
};

class GTPPXMLInPut_t: public ::xml_schema::type
{
  public:
  // TPPInput
  //
  typedef ::TPPXMLInPut_t TPPInput_type;
  typedef ::xsd::cxx::tree::traits< TPPInput_type, char > TPPInput_traits;

  const TPPInput_type&
  TPPInput () const;

  TPPInput_type&
  TPPInput ();

  void
  TPPInput (const TPPInput_type& x);

  void
  TPPInput (::std::auto_ptr< TPPInput_type > p);

  // vehicleCapacity
  //
  typedef ::xml_schema::unsigned_int vehicleCapacity_type;
  typedef ::xsd::cxx::tree::traits< vehicleCapacity_type, char > vehicleCapacity_traits;

  const vehicleCapacity_type&
  vehicleCapacity () const;

  vehicleCapacity_type&
  vehicleCapacity ();

  void
  vehicleCapacity (const vehicleCapacity_type& x);

  // Constructors.
  //
  GTPPXMLInPut_t (const TPPInput_type&,
                  const vehicleCapacity_type&);

  GTPPXMLInPut_t (::std::auto_ptr< TPPInput_type >&,
                  const vehicleCapacity_type&);

  GTPPXMLInPut_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  GTPPXMLInPut_t (const GTPPXMLInPut_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual GTPPXMLInPut_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual
  ~GTPPXMLInPut_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< TPPInput_type > TPPInput_;
  ::xsd::cxx::tree::one< vehicleCapacity_type > vehicleCapacity_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::TPPXMLInPut_t >
TPPInPutXML (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const CostMatrixType&);

void
operator<< (::xercesc::DOMAttr&, const CostMatrixType&);

void
operator<< (::xml_schema::list_stream&,
            const CostMatrixType&);

void
operator<< (::xercesc::DOMElement&, const availabilityMatrixType&);

void
operator<< (::xercesc::DOMAttr&, const availabilityMatrixType&);

void
operator<< (::xml_schema::list_stream&,
            const availabilityMatrixType&);

void
operator<< (::xercesc::DOMElement&, const coordListType&);

void
operator<< (::xercesc::DOMAttr&, const coordListType&);

void
operator<< (::xml_schema::list_stream&,
            const coordListType&);

void
operator<< (::xercesc::DOMElement&, const TPPXMLInPut_t&);

void
operator<< (::xercesc::DOMElement&, const GTPPXMLInPut_t&);

// Serialize to std::ostream.
//

void
TPPInPutXML (::std::ostream& os,
             const ::TPPXMLInPut_t& x,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
TPPInPutXML (::std::ostream& os,
             const ::TPPXMLInPut_t& x,
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
TPPInPutXML (::std::ostream& os,
             const ::TPPXMLInPut_t& x,
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
TPPInPutXML (::xercesc::XMLFormatTarget& ft,
             const ::TPPXMLInPut_t& x,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
TPPInPutXML (::xercesc::XMLFormatTarget& ft,
             const ::TPPXMLInPut_t& x,
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

void
TPPInPutXML (::xercesc::XMLFormatTarget& ft,
             const ::TPPXMLInPut_t& x,
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
TPPInPutXML (::xercesc::DOMDocument& d,
             const ::TPPXMLInPut_t& x,
             ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
TPPInPutXML (const ::TPPXMLInPut_t& x,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MVTPPXMLSCHEMA_HXX

//// Copyright (C) 2005-2008 Code Synthesis Tools CC
////
//// This program was generated by CodeSynthesis XSD, an XML Schema to
//// C++ data binding compiler.
////
//// This program is free software; you can redistribute it and/or modify
//// it under the terms of the GNU General Public License version 2 as
//// published by the Free Software Foundation.
////
//// This program is distributed in the hope that it will be useful,
//// but WITHOUT ANY WARRANTY; without even the implied warranty of
//// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//// GNU General Public License for more details.
////
//// You should have received a copy of the GNU General Public License
//// along with this program; if not, write to the Free Software
//// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
////
//// In addition, as a special exception, Code Synthesis Tools CC gives
//// permission to link this program with the Xerces-C++ library (or with
//// modified versions of Xerces-C++ that use the same license as Xerces-C++),
//// and distribute linked combinations including the two. You must obey
//// the GNU General Public License version 2 in all respects for all of
//// the code used other than Xerces-C++. If you modify this copy of the
//// program, you may extend this exception to your version of the program,
//// but you are not obligated to do so. If you do not wish to do so, delete
//// this exception statement from your version.
////
//// Furthermore, Code Synthesis Tools CC makes a special exception for
//// the Free/Libre and Open Source Software (FLOSS) which is described
//// in the accompanying FLOSSE file.
////
//
//#ifndef GTPPXMLIN_PUT_HXX
//#define GTPPXMLIN_PUT_HXX
//
//// Begin prologue.
////
////
//// End prologue.
//
//#include <xsd/cxx/config.hxx>
//
//#if (XSD_INT_VERSION != 3020000L)
//#error XSD runtime version mismatch
//#endif
//
//#include <xsd/cxx/pre.hxx>
//
//#ifndef XSD_USE_CHAR
//#define XSD_USE_CHAR
//#endif
//
//#ifndef XSD_CXX_TREE_USE_CHAR
//#define XSD_CXX_TREE_USE_CHAR
//#endif
//
//#include <xsd/cxx/tree/exceptions.hxx>
//#include <xsd/cxx/tree/elements.hxx>
//#include <xsd/cxx/tree/types.hxx>
//
//#include <xsd/cxx/xml/error-handler.hxx>
//
//#include <xsd/cxx/xml/dom/auto-ptr.hxx>
//
//#include <xsd/cxx/tree/parsing.hxx>
//#include <xsd/cxx/tree/parsing/byte.hxx>
//#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
//#include <xsd/cxx/tree/parsing/short.hxx>
//#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
//#include <xsd/cxx/tree/parsing/int.hxx>
//#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
//#include <xsd/cxx/tree/parsing/long.hxx>
//#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
//#include <xsd/cxx/tree/parsing/boolean.hxx>
//#include <xsd/cxx/tree/parsing/float.hxx>
//#include <xsd/cxx/tree/parsing/double.hxx>
//#include <xsd/cxx/tree/parsing/decimal.hxx>
//
//#include <xsd/cxx/xml/dom/serialization-header.hxx>
//#include <xsd/cxx/tree/serialization.hxx>
//#include <xsd/cxx/tree/serialization/byte.hxx>
//#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
//#include <xsd/cxx/tree/serialization/short.hxx>
//#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
//#include <xsd/cxx/tree/serialization/int.hxx>
//#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
//#include <xsd/cxx/tree/serialization/long.hxx>
//#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
//#include <xsd/cxx/tree/serialization/boolean.hxx>
//#include <xsd/cxx/tree/serialization/float.hxx>
//#include <xsd/cxx/tree/serialization/double.hxx>
//#include <xsd/cxx/tree/serialization/decimal.hxx>
//
//namespace xml_schema
//{
//  // anyType and anySimpleType.
//  //
//  typedef ::xsd::cxx::tree::type type;
//  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
//  typedef ::xsd::cxx::tree::type container;
//
//  // 8-bit
//  //
//  typedef signed char byte;
//  typedef unsigned char unsigned_byte;
//
//  // 16-bit
//  //
//  typedef short short_;
//  typedef unsigned short unsigned_short;
//
//  // 32-bit
//  //
//  typedef int int_;
//  typedef unsigned int unsigned_int;
//
//  // 64-bit
//  //
//  typedef long long long_;
//  typedef unsigned long long unsigned_long;
//
//  // Supposed to be arbitrary-length integral types.
//  //
//  typedef long long integer;
//  typedef long long non_positive_integer;
//  typedef unsigned long long non_negative_integer;
//  typedef unsigned long long positive_integer;
//  typedef long long negative_integer;
//
//  // Boolean.
//  //
//  typedef bool boolean;
//
//  // Floating-point types.
//  //
//  typedef float float_;
//  typedef double double_;
//  typedef double decimal;
//
//  // String types.
//  //
//  typedef ::xsd::cxx::tree::string< char, simple_type > string;
//  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
//  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
//  typedef ::xsd::cxx::tree::name< char, token > name;
//  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
//  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
//  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
//  typedef ::xsd::cxx::tree::language< char, token > language;
//
//  // ID/IDREF.
//  //
//  typedef ::xsd::cxx::tree::id< char, ncname > id;
//  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
//  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;
//
//  // URI.
//  //
//  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;
//
//  // Qualified name.
//  //
//  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;
//
//  // Binary.
//  //
//  typedef ::xsd::cxx::tree::buffer< char > buffer;
//  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
//  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;
//
//  // Date/time.
//  //
//  typedef ::xsd::cxx::tree::time_zone time_zone;
//  typedef ::xsd::cxx::tree::date< char, simple_type > date;
//  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
//  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
//  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
//  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
//  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
//  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
//  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
//  typedef ::xsd::cxx::tree::time< char, simple_type > time;
//
//  // Entity.
//  //
//  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
//  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;
//
//  // Namespace information and list stream. Used in
//  // serialization functions.
//  //
//  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
//  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
//  typedef ::xsd::cxx::tree::list_stream < char > list_stream;
//  typedef ::xsd::cxx::tree::as_double < double_ > as_double;
//  typedef ::xsd::cxx::tree::as_decimal < decimal > as_decimal;
//  typedef ::xsd::cxx::tree::facet facet;
//
//  // Flags and properties.
//  //
//  typedef ::xsd::cxx::tree::flags flags;
//  typedef ::xsd::cxx::tree::properties< char > properties;
//
//  // Exceptions.
//  //
//  typedef ::xsd::cxx::tree::exception< char > exception;
//  typedef ::xsd::cxx::tree::bounds< char > bounds;
//  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
//  typedef ::xsd::cxx::tree::parsing< char > parsing;
//  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
//  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
//  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
//  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
//  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
//  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
//  typedef ::xsd::cxx::tree::serialization< char > serialization;
//
//  // Parsing/serialization diagnostics.
//  //
//  typedef ::xsd::cxx::tree::severity severity;
//  typedef ::xsd::cxx::tree::error< char > error;
//  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;
//
//  // Error handler callback interface.
//  //
//  typedef ::xsd::cxx::xml::error_handler< char > error_handler;
//
//  // DOM interaction.
//  //
//  namespace dom
//  {
//    // Automatic pointer for DOMDocument.
//    //
//    using ::xsd::cxx::xml::dom::auto_ptr;
//
//#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
//#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
//    // DOM user data key for back pointers to tree nodes.
//    //
//    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
//#endif
//  }
//}
//
//// Forward declarations.
////
//class CostMatrixType;
//class availabilityMatrixType;
//class TPPXMLInPut_t;
//class GTPPXMLInPut_t;
//
//#include <memory>    // std::auto_ptr
//#include <algorithm> // std::binary_search
//
//#include <xsd/cxx/tree/exceptions.hxx>
//#include <xsd/cxx/tree/elements.hxx>
//#include <xsd/cxx/tree/containers.hxx>
//#include <xsd/cxx/tree/list.hxx>
//
//#include <xsd/cxx/xml/dom/parsing-header.hxx>
//
//class CostMatrixType: public ::xml_schema::simple_type,
//  public ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >
//{
//  public:
//  CostMatrixType ();
//
//  CostMatrixType (size_type n, const ::xml_schema::unsigned_int& x);
//
//  template < typename I >
//  CostMatrixType (const I& begin, const I& end)
//  : ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (begin, end)
//  {
//  }
//
//  CostMatrixType (const ::xercesc::DOMElement& e,
//                  ::xml_schema::flags f = 0,
//                  ::xml_schema::container* c = 0);
//
//  CostMatrixType (const ::xercesc::DOMAttr& a,
//                  ::xml_schema::flags f = 0,
//                  ::xml_schema::container* c = 0);
//
//  CostMatrixType (const ::std::string& s,
//                  const ::xercesc::DOMElement* e,
//                  ::xml_schema::flags f = 0,
//                  ::xml_schema::container* c = 0);
//
//  CostMatrixType (const CostMatrixType& x,
//                  ::xml_schema::flags f = 0,
//                  ::xml_schema::container* c = 0);
//
//  virtual CostMatrixType*
//  _clone (::xml_schema::flags f = 0,
//          ::xml_schema::container* c = 0) const;
//
//  virtual
//  ~CostMatrixType ();
//};
//
//class availabilityMatrixType: public ::xml_schema::simple_type,
//  public ::xsd::cxx::tree::list< ::xml_schema::boolean, char >
//{
//  public:
//  availabilityMatrixType ();
//
//  availabilityMatrixType (size_type n, const ::xml_schema::boolean& x);
//
//  template < typename I >
//  availabilityMatrixType (const I& begin, const I& end)
//  : ::xsd::cxx::tree::list< ::xml_schema::boolean, char > (begin, end)
//  {
//  }
//
//  availabilityMatrixType (const ::xercesc::DOMElement& e,
//                          ::xml_schema::flags f = 0,
//                          ::xml_schema::container* c = 0);
//
//  availabilityMatrixType (const ::xercesc::DOMAttr& a,
//                          ::xml_schema::flags f = 0,
//                          ::xml_schema::container* c = 0);
//
//  availabilityMatrixType (const ::std::string& s,
//                          const ::xercesc::DOMElement* e,
//                          ::xml_schema::flags f = 0,
//                          ::xml_schema::container* c = 0);
//
//  availabilityMatrixType (const availabilityMatrixType& x,
//                          ::xml_schema::flags f = 0,
//                          ::xml_schema::container* c = 0);
//
//  virtual availabilityMatrixType*
//  _clone (::xml_schema::flags f = 0,
//          ::xml_schema::container* c = 0) const;
//
//  virtual
//  ~availabilityMatrixType ();
//};
//
//class TPPXMLInPut_t: public ::xml_schema::type
//{
//  public:
//  // instanceName
//  //
//  typedef ::xml_schema::string instanceName_type;
//  typedef ::xsd::cxx::tree::traits< instanceName_type, char > instanceName_traits;
//
//  const instanceName_type&
//  instanceName () const;
//
//  instanceName_type&
//  instanceName ();
//
//  void
//  instanceName (const instanceName_type& x);
//
//  void
//  instanceName (::std::auto_ptr< instanceName_type > p);
//
//  // Comment
//  //
//  typedef ::xml_schema::string Comment_type;
//  typedef ::xsd::cxx::tree::traits< Comment_type, char > Comment_traits;
//
//  const Comment_type&
//  Comment () const;
//
//  Comment_type&
//  Comment ();
//
//  void
//  Comment (const Comment_type& x);
//
//  void
//  Comment (::std::auto_ptr< Comment_type > p);
//
//  // nNodes
//  //
//  typedef ::xml_schema::unsigned_int nNodes_type;
//  typedef ::xsd::cxx::tree::traits< nNodes_type, char > nNodes_traits;
//
//  const nNodes_type&
//  nNodes () const;
//
//  nNodes_type&
//  nNodes ();
//
//  void
//  nNodes (const nNodes_type& x);
//
//  // nUsers
//  //
//  typedef ::xml_schema::unsigned_int nUsers_type;
//  typedef ::xsd::cxx::tree::traits< nUsers_type, char > nUsers_traits;
//
//  const nUsers_type&
//  nUsers () const;
//
//  nUsers_type&
//  nUsers ();
//
//  void
//  nUsers (const nUsers_type& x);
//
//  // nodesMatrixCost
//  //
//  typedef ::CostMatrixType nodesMatrixCost_type;
//  typedef ::xsd::cxx::tree::traits< nodesMatrixCost_type, char > nodesMatrixCost_traits;
//
//  const nodesMatrixCost_type&
//  nodesMatrixCost () const;
//
//  nodesMatrixCost_type&
//  nodesMatrixCost ();
//
//  void
//  nodesMatrixCost (const nodesMatrixCost_type& x);
//
//  void
//  nodesMatrixCost (::std::auto_ptr< nodesMatrixCost_type > p);
//
//  // usersMatrixCost
//  //
//  typedef ::CostMatrixType usersMatrixCost_type;
//  typedef ::xsd::cxx::tree::traits< usersMatrixCost_type, char > usersMatrixCost_traits;
//
//  const usersMatrixCost_type&
//  usersMatrixCost () const;
//
//  usersMatrixCost_type&
//  usersMatrixCost ();
//
//  void
//  usersMatrixCost (const usersMatrixCost_type& x);
//
//  void
//  usersMatrixCost (::std::auto_ptr< usersMatrixCost_type > p);
//
//  // availabilityMatrix
//  //
//  typedef ::availabilityMatrixType availabilityMatrix_type;
//  typedef ::xsd::cxx::tree::traits< availabilityMatrix_type, char > availabilityMatrix_traits;
//
//  const availabilityMatrix_type&
//  availabilityMatrix () const;
//
//  availabilityMatrix_type&
//  availabilityMatrix ();
//
//  void
//  availabilityMatrix (const availabilityMatrix_type& x);
//
//  void
//  availabilityMatrix (::std::auto_ptr< availabilityMatrix_type > p);
//
//  // Constructors.
//  //
//  TPPXMLInPut_t (const instanceName_type&,
//                 const Comment_type&,
//                 const nNodes_type&,
//                 const nUsers_type&,
//                 const nodesMatrixCost_type&,
//                 const usersMatrixCost_type&,
//                 const availabilityMatrix_type&);
//
//  TPPXMLInPut_t (const ::xercesc::DOMElement& e,
//                 ::xml_schema::flags f = 0,
//                 ::xml_schema::container* c = 0);
//
//  TPPXMLInPut_t (const TPPXMLInPut_t& x,
//                 ::xml_schema::flags f = 0,
//                 ::xml_schema::container* c = 0);
//
//  virtual TPPXMLInPut_t*
//  _clone (::xml_schema::flags f = 0,
//          ::xml_schema::container* c = 0) const;
//
//  virtual
//  ~TPPXMLInPut_t ();
//
//  // Implementation.
//  //
//  protected:
//  void
//  parse (::xsd::cxx::xml::dom::parser< char >&,
//         ::xml_schema::flags);
//
//  protected:
//  ::xsd::cxx::tree::one< instanceName_type > instanceName_;
//  ::xsd::cxx::tree::one< Comment_type > Comment_;
//  ::xsd::cxx::tree::one< nNodes_type > nNodes_;
//  ::xsd::cxx::tree::one< nUsers_type > nUsers_;
//  ::xsd::cxx::tree::one< nodesMatrixCost_type > nodesMatrixCost_;
//  ::xsd::cxx::tree::one< usersMatrixCost_type > usersMatrixCost_;
//  ::xsd::cxx::tree::one< availabilityMatrix_type > availabilityMatrix_;
//};
//
//class GTPPXMLInPut_t: public ::xml_schema::type
//{
//  public:
//  // TPPInput
//  //
//  typedef ::TPPXMLInPut_t TPPInput_type;
//  typedef ::xsd::cxx::tree::traits< TPPInput_type, char > TPPInput_traits;
//
//  const TPPInput_type&
//  TPPInput () const;
//
//  TPPInput_type&
//  TPPInput ();
//
//  void
//  TPPInput (const TPPInput_type& x);
//
//  void
//  TPPInput (::std::auto_ptr< TPPInput_type > p);
//
//  // vehicleCapacity
//  //
//  typedef ::xml_schema::unsigned_int vehicleCapacity_type;
//  typedef ::xsd::cxx::tree::traits< vehicleCapacity_type, char > vehicleCapacity_traits;
//
//  const vehicleCapacity_type&
//  vehicleCapacity () const;
//
//  vehicleCapacity_type&
//  vehicleCapacity ();
//
//  void
//  vehicleCapacity (const vehicleCapacity_type& x);
//
//  // Constructors.
//  //
//  GTPPXMLInPut_t (const TPPInput_type&,
//                  const vehicleCapacity_type&);
//
//  GTPPXMLInPut_t (::std::auto_ptr< TPPInput_type >&,
//                  const vehicleCapacity_type&);
//
//  GTPPXMLInPut_t (const ::xercesc::DOMElement& e,
//                  ::xml_schema::flags f = 0,
//                  ::xml_schema::container* c = 0);
//
//  GTPPXMLInPut_t (const GTPPXMLInPut_t& x,
//                  ::xml_schema::flags f = 0,
//                  ::xml_schema::container* c = 0);
//
//  virtual GTPPXMLInPut_t*
//  _clone (::xml_schema::flags f = 0,
//          ::xml_schema::container* c = 0) const;
//
//  virtual
//  ~GTPPXMLInPut_t ();
//
//  // Implementation.
//  //
//  protected:
//  void
//  parse (::xsd::cxx::xml::dom::parser< char >&,
//         ::xml_schema::flags);
//
//  protected:
//  ::xsd::cxx::tree::one< TPPInput_type > TPPInput_;
//  ::xsd::cxx::tree::one< vehicleCapacity_type > vehicleCapacity_;
//};
//
//#include <iosfwd>
//
//#include <xercesc/sax/InputSource.hpp>
//#include <xercesc/dom/DOMDocument.hpp>
//#include <xercesc/dom/DOMErrorHandler.hpp>
//
//// Parse a URI or a local file.
////
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (const ::std::string& uri,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (const ::std::string& uri,
//             ::xml_schema::error_handler& eh,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (const ::std::string& uri,
//             ::xercesc::DOMErrorHandler& eh,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//// Parse std::istream.
////
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             ::xml_schema::error_handler& eh,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             ::xercesc::DOMErrorHandler& eh,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             const ::std::string& id,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             const ::std::string& id,
//             ::xml_schema::error_handler& eh,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::std::istream& is,
//             const ::std::string& id,
//             ::xercesc::DOMErrorHandler& eh,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//// Parse xercesc::InputSource.
////
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::xercesc::InputSource& is,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::xercesc::InputSource& is,
//             ::xml_schema::error_handler& eh,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::xercesc::InputSource& is,
//             ::xercesc::DOMErrorHandler& eh,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//// Parse xercesc::DOMDocument.
////
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (const ::xercesc::DOMDocument& d,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//::std::auto_ptr< ::TPPXMLInPut_t >
//TPPInPutXML (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
//             ::xml_schema::flags f = 0,
//             const ::xml_schema::properties& p = ::xml_schema::properties ());
//
//#include <iosfwd>
//
//#include <xercesc/dom/DOMDocument.hpp>
//#include <xercesc/dom/DOMErrorHandler.hpp>
//#include <xercesc/framework/XMLFormatter.hpp>
//
//#include <xsd/cxx/xml/dom/auto-ptr.hxx>
//
//void
//operator<< (::xercesc::DOMElement&, const CostMatrixType&);
//
//void
//operator<< (::xercesc::DOMAttr&, const CostMatrixType&);
//
//void
//operator<< (::xml_schema::list_stream&,
//            const CostMatrixType&);
//
//void
//operator<< (::xercesc::DOMElement&, const availabilityMatrixType&);
//
//void
//operator<< (::xercesc::DOMAttr&, const availabilityMatrixType&);
//
//void
//operator<< (::xml_schema::list_stream&,
//            const availabilityMatrixType&);
//
//void
//operator<< (::xercesc::DOMElement&, const TPPXMLInPut_t&);
//
//void
//operator<< (::xercesc::DOMElement&, const GTPPXMLInPut_t&);
//
//// Serialize to std::ostream.
////
//
//void
//TPPInPutXML (::std::ostream& os,
//             const ::TPPXMLInPut_t& x,
//             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
//             const ::std::string& e = "UTF-8",
//             ::xml_schema::flags f = 0);
//
//void
//TPPInPutXML (::std::ostream& os,
//             const ::TPPXMLInPut_t& x,
//             ::xml_schema::error_handler& eh,
//             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
//             const ::std::string& e = "UTF-8",
//             ::xml_schema::flags f = 0);
//
//void
//TPPInPutXML (::std::ostream& os,
//             const ::TPPXMLInPut_t& x,
//             ::xercesc::DOMErrorHandler& eh,
//             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
//             const ::std::string& e = "UTF-8",
//             ::xml_schema::flags f = 0);
//
//// Serialize to xercesc::XMLFormatTarget.
////
//
//void
//TPPInPutXML (::xercesc::XMLFormatTarget& ft,
//             const ::TPPXMLInPut_t& x,
//             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
//             const ::std::string& e = "UTF-8",
//             ::xml_schema::flags f = 0);
//
//void
//TPPInPutXML (::xercesc::XMLFormatTarget& ft,
//             const ::TPPXMLInPut_t& x,
//             ::xml_schema::error_handler& eh,
//             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
//             const ::std::string& e = "UTF-8",
//             ::xml_schema::flags f = 0);
//
//void
//TPPInPutXML (::xercesc::XMLFormatTarget& ft,
//             const ::TPPXMLInPut_t& x,
//             ::xercesc::DOMErrorHandler& eh,
//             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
//             const ::std::string& e = "UTF-8",
//             ::xml_schema::flags f = 0);
//
//// Serialize to an existing xercesc::DOMDocument.
////
//
//void
//TPPInPutXML (::xercesc::DOMDocument& d,
//             const ::TPPXMLInPut_t& x,
//             ::xml_schema::flags f = 0);
//
//// Serialize to a new xercesc::DOMDocument.
////
//
//::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
//TPPInPutXML (const ::TPPXMLInPut_t& x,
//             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
//             ::xml_schema::flags f = 0);
//
//#include <xsd/cxx/post.hxx>
//
//// Begin epilogue.
////
////
//// End epilogue.
//
//#endif // GTPPXMLIN_PUT_HXX
